// User Code Section ###########################################################
package src;
import java_cup.runtime.*;

//Options and Declarations Section #############################################
%%
// Setting options and shiz
%class Lexer   //Tell JFlex to generate class named 'Lexer'
%line          //Let's us access the current line with the variable 'yyline'
%column        //Let's us access the current column with the variable 'yycolumn'
%cup           //Puts JFlex in a mode compatible with parser generated by CUP

// We insert java code here. These will be copied as member variables and methods
// inside the class generated by JFlex.
%{

    
    // Creates Symbol with only position and type (usefull for keywords, operations, etc.)
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    // Creates Symbol with position, type and value of token
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
%}

// We can add some 'Macros', which can be used as abbreviations in the next section
/* A line terminator is a \r (carriage return), \n (line feed), or \r\n. */

LineTerminator = \r|\n|\r\n

/* White space is a line terminator, space, tab, or line feed. */

WhiteSpace     = {LineTerminator} | [ \t\f]

/* A literal integer is is a number beginning with a number between
   one and nine followed by zero or more numbers between zero and nine
   or just a zero.  */

int = 0 | [0]*[1-9][0-9]* ("." [0-9]+)?

//Lexical Rules Section ########################################################
%%

"+" { System.out.println("+"); return symbol(sym.PLUS); }
"-" { System.out.println("-"); return symbol(sym.MINUS); }
"*" { System.out.println("*"); return symbol(sym.TIMES); }
"/" { System.out.println("/"); return symbol(sym.DIVIDE); }
"(" { System.out.println("/"); return symbol(sym.LPAR); }
")" { System.out.println("/"); return symbol(sym.RPAR); }
{int} { System.out.println("Integer: "+yytext()); return symbol(sym.NUMBER, new Float(yytext())); }
{WhiteSpace} {/*do nothing*/}

/* No token was found for the input so through an error.  Print out an
   Illegal character message with the illegal character that was found. */

[^]                    { throw new Error("Illegal character <"+yytext()+">"); }